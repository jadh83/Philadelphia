# Load readers
library(readr)
library(readxl)
library(tidyverse)
# Load school enrollment and performance data
penn_sch_enr_race <- read_excel("2018-2019 Enrollment by Race.xlsx")
penn_sch_per_keystone <- read_excel("2019 Keystone Exams School Level Data.xlsx")
# Obtain enrollment data only for Philadelphia
phil_sch_enr_race <- penn_sch_enr_race[which(penn_sch_enr_race[,"County"] == "Philadelphia"),]
phil_sch_per_keystone <- penn_sch_per_keystone[which(penn_sch_per_keystone[,"County"] == "Philadelphia"),]
# Change column names to lower case and eliminate spaces in column names
colnames(phil_sch_enr_race) <- gsub(" ", ".", tolower(colnames(phil_sch_enr_race)))
colnames(phil_sch_per_keystone) <- gsub(" ", ".", tolower(colnames(phil_sch_per_keystone)))
## Race Data Set
analytic_phil_race <- select(phil_sch_enr_race, aun, lea.name, lea.type, race, '009', '010', '011', '012')
analytic_phil_race$'009' <- as.numeric(analytic_phil_race$'009')
analytic_phil_race$'010' <- as.numeric(analytic_phil_race$'010')
analytic_phil_race$'011' <- as.numeric(analytic_phil_race$'011')
analytic_phil_race$'012' <- as.numeric(analytic_phil_race$'012')
analytic_phil_race[is.na(analytic_phil_race)]=0
analytic_phil_race$total <- analytic_phil_race$'009' + analytic_phil_race$'010' + analytic_phil_race$'011' + analytic_phil_race$'012'
analytic_phil_race <- select(analytic_phil_race, aun, lea.name, lea.type, race, total)
analytic_phil_race_wide <- pivot_wider(analytic_phil_race, names_from = race, values_from = total)
colnames(analytic_phil_race_wide) <- gsub(" ",".", tolower(colnames(analytic_phil_race_wide)))
analytic_phil_race_wide$total <- rowSums(analytic_phil_race_wide[,4:10])
analytic_phil_race_wide_filter <- filter(analytic_phil_race_wide, total != 0)
analytic_phil_race_final <- filter(analytic_phil_race_wide_filter, lea.type == 'CS')
## Keystone Data Set
analytic_phil_keystone <- select(phil_sch_per_keystone, -grade, -school.number, -county, -district.name, )
analytic_phil_keystone_filter <- filter(analytic_phil_keystone, group == "All Students")
analytic_phil_keystone_filter <- select(analytic_phil_keystone_filter, -group)
analytic_phil_keystone_algebra <- filter(analytic_phil_keystone_filter, subject == "Algebra I")
analytic_phil_keystone_biology <- filter(analytic_phil_keystone_filter, subject == "Biology")
analytic_phil_keystone_literature <- filter(analytic_phil_keystone_filter, subject == "Literature")
analytic_phil_keystone_algebra <- select(analytic_phil_keystone_algebra, -subject)
analytic_phil_keystone_biology <- select(analytic_phil_keystone_biology, -subject)
analytic_phil_keystone_literature <- select(analytic_phil_keystone_literature, -subject)
## Merge datasets
analytic_phil_race_final$aun <- as.numeric(analytic_phil_race_final$aun)
analytic_algebra <- left_join(analytic_phil_race_final, analytic_phil_keystone_algebra, by = "aun") %>%
filter(number.scored != "NA") %>%
select(-aun, -lea.type, -school.name)
View(analytic_algebra)
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Philadelphia SD Data Project/Script/Homework5.R')
View(analytic_algebra)
View(analytic_biology)
View(analytic_literature)
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Philadelphia SD Data Project/Script/Homework5.R')
View(analytic_algebra)
analytic_algebra$number.advanced <- with(analytic_algebra, number.scored * percent.advanced)
View(analytic_algebra)
analytic_algebra$number.advanced <- with(analytic_algebra, round(number.scored * percent.advanced))
View(analytic_algebra)
analytic_algebra$number.advanced <- with(analytic_algebra, round(number.scored * percent.advanced))
analytic_algebra$number.proficient <- with(analytic_algebra, round(number.scored * percent.proficient))
analytic_algebra$number.basic <- with(analytic_algebra, round(number.scored * percent.basic))
analytic_algebra$number.below.basic <- with(analytic_algebra, round(number.scored * percent.below.basic))
View(analytic_algebra)
analytic_algebra$number.proficient <- with(analytic_algebra, round(number.scored * percent.proficient / 100))
analytic_algebra$number.basic <- with(analytic_algebra, round(number.scored * percent.basic / 100))
analytic_algebra$number.below.basic <- with(analytic_algebra, round(number.scored * percent.below.basic / 100))
View(analytic_algebra)
analytic_algebra <- select(-percent.advanced, -percent.proficient, -percent.basic, -percent.below.basic)
analytic_algebra <- select(analytic_algebra, -percent.advanced, -percent.proficient, -percent.basic, -percent.below.basic)
View(analytic_algebra)
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Philadelphia SD Data Project/Script/Homework5.R')
View(analytic_algebra)
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Philadelphia SD Data Project/Script/Homework5.R')
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Philadelphia SD Data Project/Script/Homework5.R')
View(analytic_algebra)
View(analytic_biology)
View(analytic_literature)
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Philadelphia SD Data Project/Script/Homework5.R')
View(analytic_biology)
overall.percent.advanced.algebra <- sum(analytic_algebra$number.advanced) / sum(analytic_algebra$number.scored) * 100
overall.percent.proficient.algebra <- sum(analytic_algebra$number.proficient) / sum(analytic_algebra$number.scored) * 100
overall.percent.basic.algebra <- sum(analytic_algebra$number.basic) / sum(analytic_algebra$number.scored) * 100
overall.percent.below.basic.algebra <- sum(analytic_algebra$number.below.basic) / sum(analytic_algebra$number.scored) * 100
overall.percent.advanced.algebra <- float(sum(analytic_algebra$number.advanced) / sum(analytic_algebra$number.scored) * 100)
overall.percent.advanced.algebra <- sum(analytic_algebra$number.advanced) / sum(analytic_algebra$number.scored) * 100
overall.percent.proficient.algebra <- sum(analytic_algebra$number.proficient) / sum(analytic_algebra$number.scored) * 100
overall.percent.basic.algebra <- sum(analytic_algebra$number.basic) / sum(analytic_algebra$number.scored) * 100
overall.percent.below.basic.algebra <- sum(analytic_algebra$number.below.basic) / sum(analytic_algebra$number.scored) * 100
overall.percent.advanced.biology <- sum(analytic_biology$number.advanced) / sum(analytic_biology$number.scored) * 100
overall.percent.proficient.biology <- sum(analytic_biology$number.proficient) / sum(analytic_biology$number.scored) * 100
overall.percent.basic.biology <- sum(analytic_biology$number.basic) / sum(analytic_biology$number.scored) * 100
overall.percent.below.basic.biology <- sum(analytic_biology$number.below.basic) / sum(analytic_biology$number.scored) * 100
overall.percent.advanced.literature <- sum(analytic_literature$number.advanced) / sum(analytic_literature$number.scored) * 100
overall.percent.proficient.literature <- sum(analytic_literature$number.proficient) / sum(analytic_literature$number.scored) * 100
overall.percent.basic.literature <- sum(analytic_literature$number.basic) / sum(analytic_literature$number.scored) * 100
overall.percent.below.basic.literature <- sum(analytic_literature$number.below.basic) / sum(analytic_literature$number.scored) * 100
analytic_algebra$overall.percent.advanced <- sum(analytic_algebra$number.advanced) / sum(analytic_algebra$number.scored) * 100
analytic_algebra$overall.percent.proficient <- sum(analytic_algebra$number.proficient) / sum(analytic_algebra$number.scored) * 100
analytic_algebra$overall.percent.basic <- sum(analytic_algebra$number.basic) / sum(analytic_algebra$number.scored) * 100
analytic_algebra$overall.percent.below.basic <- sum(analytic_algebra$number.below.basic) / sum(analytic_algebra$number.scored) * 100
analytic_biology$overall.percent.advanced <- sum(analytic_biology$number.advanced) / sum(analytic_biology$number.scored) * 100
analytic_biology$overall.percent.proficient <- sum(analytic_biology$number.proficient) / sum(analytic_biology$number.scored) * 100
analytic_biology$overall.percent.basic <- sum(analytic_biology$number.basic) / sum(analytic_biology$number.scored) * 100
analytic_biology$overall.percent.below.basic <- sum(analytic_biology$number.below.basic) / sum(analytic_biology$number.scored) * 100
analytic_literature$overall.percent.advanced <- sum(analytic_literature$number.advanced) / sum(analytic_literature$number.scored) * 100
analytic_literature$overall.percent.proficient <- sum(analytic_literature$number.proficient) / sum(analytic_literature$number.scored) * 100
analytic_literature$overall.percent.basic <- sum(analytic_literature$number.basic) / sum(analytic_literature$number.scored) * 100
analytic_literature$overall.percent.below.basic <- sum(analytic_literature$number.below.basic) / sum(analytic_literature$number.scored) * 100
View(analytic_algebra)
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Philadelphia SD Data Project/Script/Homework5.R')
View(analytic_algebra)
analytic_algebra %>%
mutate(diff.percent.advanced = percent.advanced - overall.percent.advanced)
View(analytic_algebra)
analytic_algebra$diff.percent.advanced <- analytic_algebra$percent.advanced - analytic_algebra$overall.percent.advanced
View(analytic_algebra)
analytic_algebra$diff.percent.advanced <- analytic_algebra$percent.advanced - analytic_algebra$overall.percent.advanced
analytic_algebra$diff.percent.proficient <- analytic_algebra$percent.proficient - analytic_algebra$overall.percent.proficient
analytic_algebra$diff.percent.basic <- analytic_algebra$percent.basic - analytic_algebra$overall.percent.basic
analytic_algebra$diff.percent.below.basic <- analytic_algebra$percent.below.basic - analytic_algebra$overall.percent.below.basic
analytic_algebra$diff.percent.advanced <- analytic_algebra$percent.advanced - analytic_algebra$overall.percent.advanced
analytic_algebra$diff.percent.proficient <- analytic_algebra$percent.proficient - analytic_algebra$overall.percent.proficient
analytic_algebra$diff.percent.basic <- analytic_algebra$percent.basic - analytic_algebra$overall.percent.basic
analytic_algebra$diff.percent.below.basic <- analytic_algebra$percent.below.basic - analytic_algebra$overall.percent.below.basic
analytic_biology$diff.percent.advanced <- analytic_biology$percent.advanced - analytic_biology$overall.percent.advanced
analytic_biology$diff.percent.proficient <- analytic_biology$percent.proficient - analytic_biology$overall.percent.proficient
analytic_biology$diff.percent.basic <- analytic_biology$percent.basic - analytic_biology$overall.percent.basic
analytic_biology$diff.percent.below.basic <- analytic_biology$percent.below.basic - analytic_biology$overall.percent.below.basic
analytic_literature$diff.percent.advanced <- analytic_literature$percent.advanced - analytic_literature$overall.percent.advanced
analytic_literature$diff.percent.proficient <- analytic_literature$percent.proficient - analytic_literature$overall.percent.proficient
analytic_literature$diff.percent.basic <- analytic_literature$percent.basic - analytic_literature$overall.percent.basic
analytic_literature$diff.percent.below.basic <- analytic_literature$percent.below.basic - analytic_literature$overall.percent.below.basic
View(analytic_biology)
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Philadelphia SD Data Project/Script/Homework5.R')
View(analytic_algebra)
View(analytic_algebra)
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Philadelphia SD Data Project/Script/Homework5.R')
warnings()
View(analytic_algebra)
View(analytic_biology)
View(analytic_literature)
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Class5.R')
setwd("C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory")
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Class5.R')
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Class6.R')
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Class6.R')
View(tests)
pivot_longer(
tests,
starts_with("test"),
names_to = "testname",
values_to = "testscore"
)
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Class6.R')
View(tests)
pivot_longer(
tests,
starts_with("test"),
names_to = "testname",
values_to = "testscore"
) %>% View
pivot_longer(
tests,
starts_with("test"),
names_to = "testnum",
names_prefix = "test_",
values_to = "testscore"
) %>%
pivot_longer(
tests,
starts_with("test"),
names_to = "testnum",
names_prefix = "test_",
values_to = "testscore"
) %>% View
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Class6.R')
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Class6.R')
View(tests_long)
pivot_wider(
tests_long,
id,
names_from = testnum,
values_from = testscore
) %>% View
pivot_wider(
tests_long,
id,
names_from = testnum,
names_glue = "test_{testnum}"
values_from = testscore
) %>% View
pivot_wider(
tests_long,
id,
names_from = testnum,
names_glue = "test_(testnum)"
values_from = testscore
) %>% View
pivot_wider(
tests_long,
id,
names_from = testnum,
names_glue = "test_{testnum}",
values_from = testscore
) %>% View
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Class6.R')
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Class6.R')
rep(1:1000, each = 8)
N <- 8000
tests <- data.frame(
id = rep(1:(N/8), each = 8),
testnum = rep(1:4, times = N/4)
) %<%
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Class6.R')
N <- 8000
tests <- data.frame(
id = rep(1:(N/8), each = 8),
testnum = rep(1:4, times = N/4)
) %<% View
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Class6.R')
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Class6.R')
N <- 8000
tests <- data.frame(
id = rep(1:(N/8), each = 8),
testnum = rep(1:4, times = N/4),
testsbj = rep(c("ela", "math"), each = 4, times = N / 8)
) %>% View
N <- 8000
tests <- data.frame(
id = rep(1:(N/8), each = 8),
testnum = rep(1:4, times = N/4),
testsbj = rep(c("ela", "math"), each = 4, times = N / 8),
testscore = rnorm(N, 100, 25)
) %>% View
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Class6.R')
View(tests)
pivot_wider(tests,
id,
names_from = c(testnum, testsbj),
values_from = testscore
) %>% View
pivot_wider(tests,
id,
names_from = c(testsbj, testnum),
names_prefix = "test_",
values_from = testscore
) %>% View
tests_wide <- pivot_wider(tests,
id,
names_from = c(testsbj, testnum),
names_prefix = "test_",
values_from = testscore
)
pivot_longer(
tests_wide,
starts_with("test"),
names_to = "testnumsbj",
values_to = "testscore"
) %>% View
pivot_longer(
tests_wide,
starts_with("test"),
names_to = "testnumsbj",
names_prefix = "test_",
values_to = "testscore"
) %>% View
pivot_longer(
tests_wide,
starts_with("test"),
names_to = c("testsbj", "testnum"),
names_sep = "_",
names_prefix = "test_",
values_to = "testscore"
) %>% View
tests_long <- pivot_longer(
tests_wide,
starts_with("test"),
names_to = c("testsbj", "testnum"),
names_sep = "_",
names_prefix = "test_",
values_to = "testscore"
) %>% select(id, testnum, testsbj, testscore)
View(tests_long)
View(tests)
rm(list=ls())
set.seed(1)
N <- 1000
tests <- data.frame(
id = 1:N,
test_1 = rnorm(N, 100, 25)
) %>%
mutate(
test_2 = test_1 + rnorm(N, 5, 5),
test_3 = test_2 + rnorm(N, 5, 5),
test_4 = test_3 + rnorm(N, 5, 5),
rushflag_1 = as.integer(runif(N) > 0.99),
rushflag_2 = as.integer(runif(N) > 0.98),
rushflag_3 = as.integer(runif(N) > 0.95),
rushflag_4 = as.integer(runif(N) > 0.90),
)
rm(list=ls())
set.seed(1)
N <- 1000
tests <- data.frame(
id = 1:N,
test_1 = rnorm(N, 100, 25)
) %>%
mutate(
test_2 = test_1 + rnorm(N, 5, 5),
test_3 = test_2 + rnorm(N, 5, 5),
test_4 = test_3 + rnorm(N, 5, 5),
rushflag_1 = as.integer(runif(N) > 0.99),
rushflag_2 = as.integer(runif(N) > 0.98),
rushflag_3 = as.integer(runif(N) > 0.95),
rushflag_4 = as.integer(runif(N) > 0.90),
) %>% View
pivot_longer(
tests,
-id,
names_to = c(".value", "test_name")
) %>% View
rm(list=ls())
set.seed(1)
N <- 1000
tests <- data.frame(
id = 1:N,
test_1 = rnorm(N, 100, 25)
) %>%
mutate(
test_2 = test_1 + rnorm(N, 5, 5),
test_3 = test_2 + rnorm(N, 5, 5),
test_4 = test_3 + rnorm(N, 5, 5),
rushflag_1 = as.integer(runif(N) > 0.99),
rushflag_2 = as.integer(runif(N) > 0.98),
rushflag_3 = as.integer(runif(N) > 0.95),
rushflag_4 = as.integer(runif(N) > 0.90),
)
pivot_longer(
tests,
-id,
names_to = c(".value", "test_name"),
names_sep = "_"
) %>% View
rm(list=ls())
set.seed(1)
N <- 1000
tests <- data.frame(
id = 1:N,
test_1 = rnorm(N, 100, 25)
) %>%
mutate(
test_2 = test_1 + rnorm(N, 5, 5),
test_3 = test_2 + rnorm(N, 5, 5),
test_4 = test_3 + rnorm(N, 5, 5),
rushflag_1 = as.integer(runif(N) > 0.99),
rushflag_2 = as.integer(runif(N) > 0.98),
rushflag_3 = as.integer(runif(N) > 0.95),
rushflag_4 = as.integer(runif(N) > 0.90),
)
tests_long <- pivot_longer(
tests,
-id,
names_to = c(".value", "test_name"),
names_sep = "_"
) %>% magrittr::set_colnames(c("id", "testnum", "testscore", "rushflag"))
View(tests_long)
pivot_wider(
rename(tests_long, test = testscore),
id,
names_from = "testnum",
names_sep = "_",
values_from = c("testscore", "rushflag"),
)
pivot_wider(
rename(tests_long, test = testscore),
id,
names_from = "testnum",
names_sep = "_",
values_from = c("test", "rushflag"),
)
pivot_wider(
rename(tests_long, test = testscore),
id,
names_from = "testnum",
names_sep = "_",
values_from = c("test", "rushflag"),
) %>% View
rm(list=ls())
set.seed(1)
N <- 1000
tests <- data.frame(
id = 1:N,
test_1 = rnorm(N, 100, 25)
) %>%
mutate(
test_2 = test_1 + rnorm(N, 5, 5),
test_3 = test_2 + rnorm(N, 5, 5),
test_4 = test_3 + rnorm(N, 5, 5),
rushflag_1 = as.integer(runif(N) > 0.99),
rushflag_2 = as.integer(runif(N) > 0.98),
rushflag_3 = as.integer(runif(N) > 0.95),
rushflag_4 = as.integer(runif(N) > 0.90),
)
tests_long <- pivot_longer(
tests,
-id,
names_to = c(".value", "test_name"),
names_sep = "_"
) %>% magrittr::set_colnames(c("id", "testnum", "testscore", "rushflag"))
## Long to Wide
pivot_wider(
rename(tests_long, test = testscore),
id,
names_from = "testnum",
names_sep = "_",
values_from = c("test", "rushflag"),
) %>% View
rm(list=ls())
set.seed(1)
N <- 1000
tests <- data.frame(
id = 1:N,
test_1 = rnorm(N, 100, 25)
) %>%
mutate(
test_2 = test_1 + rnorm(N, 5, 5),
test_3 = test_2 + rnorm(N, 5, 5),
test_4 = test_3 + rnorm(N, 5, 5),
rushflag_1 = as.integer(runif(N) > 0.99),
rushflag_2 = as.integer(runif(N) > 0.98),
rushflag_3 = as.integer(runif(N) > 0.95),
rushflag_4 = as.integer(runif(N) > 0.90),
)
tests_long <- pivot_longer(
tests,
-id,
names_to = c(".value", "test_name"),
names_sep = "_"
) %>% magrittr::set_colnames(c("id", "testnum", "testscore", "rushflag"))
## Long to Wide
tests_wide <- pivot_wider(
rename(tests_long, test = testscore),
id,
names_from = "testnum",
names_sep = "_",
values_from = c("test", "rushflag"),
)
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Philadelphia SD Data Project/Script/Homework5.R')
View(analytic_algebra)
# Author: Justin Hill
# Created: 02/27/2021
# Purposes:
# 1) Compute & Merge statistics
###
## Set up environment and prepare data sets
rm(list=ls())
# Load readers
library(readr)
library(readxl)
library(tidyverse)
# Load school enrollment and performance data
penn_sch_enr_race <- read_excel("2018-2019 Enrollment by Race.xlsx")
penn_sch_per_keystone <- read_excel("2019 Keystone Exams School Level Data.xlsx")
# Obtain enrollment data only for Philadelphia
phil_sch_enr_race <- penn_sch_enr_race[which(penn_sch_enr_race[,"County"] == "Philadelphia"),]
phil_sch_per_keystone <- penn_sch_per_keystone[which(penn_sch_per_keystone[,"County"] == "Philadelphia"),]
# Change column names to lower case and eliminate spaces in column names
colnames(phil_sch_enr_race) <- gsub(" ", ".", tolower(colnames(phil_sch_enr_race)))
colnames(phil_sch_per_keystone) <- gsub(" ", ".", tolower(colnames(phil_sch_per_keystone)))
## Demographic Data Set
# Drop variables and convert student numbers to numeric values
analytic_phil_race <- select(phil_sch_enr_race, aun, lea.name, lea.type, race, '009', '010', '011', '012')
analytic_phil_race$'009' <- as.numeric(analytic_phil_race$'009')
analytic_phil_race$'010' <- as.numeric(analytic_phil_race$'010')
analytic_phil_race$'011' <- as.numeric(analytic_phil_race$'011')
analytic_phil_race$'012' <- as.numeric(analytic_phil_race$'012')
# Calculate total number of high school age students (grades 9-12)
analytic_phil_race[is.na(analytic_phil_race)]=0
analytic_phil_race$total <- analytic_phil_race$'009' + analytic_phil_race$'010' + analytic_phil_race$'011' + analytic_phil_race$'012'
analytic_phil_race <- select(analytic_phil_race, aun, lea.name, lea.type, race, total)
View(analytic_phil_race)
### Homework 5 Project ###
# Author: Justin Hill
# Created: 02/27/2021
# Purposes:
# 1) Compute & Merge statistics
###
## Set up environment and prepare data sets
rm(list=ls())
# Load readers
library(readr)
library(readxl)
library(tidyverse)
# Load school enrollment and performance data
penn_sch_enr_race <- read_excel("2018-2019 Enrollment by Race.xlsx")
penn_sch_per_keystone <- read_excel("2019 Keystone Exams School Level Data.xlsx")
# Obtain enrollment data only for Philadelphia
phil_sch_enr_race <- penn_sch_enr_race[which(penn_sch_enr_race[,"County"] == "Philadelphia"),]
phil_sch_per_keystone <- penn_sch_per_keystone[which(penn_sch_per_keystone[,"County"] == "Philadelphia"),]
# Change column names to lower case and eliminate spaces in column names
colnames(phil_sch_enr_race) <- gsub(" ", ".", tolower(colnames(phil_sch_enr_race)))
colnames(phil_sch_per_keystone) <- gsub(" ", ".", tolower(colnames(phil_sch_per_keystone)))
## Demographic Data Set
# Drop variables and convert student numbers to numeric values
analytic_phil_race <- select(phil_sch_enr_race, aun, lea.name, lea.type, race, '009', '010', '011', '012')
analytic_phil_race$'009' <- as.numeric(analytic_phil_race$'009')
analytic_phil_race$'010' <- as.numeric(analytic_phil_race$'010')
analytic_phil_race$'011' <- as.numeric(analytic_phil_race$'011')
analytic_phil_race$'012' <- as.numeric(analytic_phil_race$'012')
View(analytic_phil_race)
sqrt(10)
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow - Git/Data-Workflow-Git/Git Directory/Philadelphia SD Data Project/Script/Homework5.R')
View(analytic_algebra)
View(analytic_biology)
View(analytic_literature)
source('C:/Users/jadh8/OneDrive - Johns Hopkins/Desktop/Data Files/Data Workflow/Data-Workflow-master/CODE.R')
source('C:/Users/jadh8/Downloads/Data-Workflow-master (1)/Data-Workflow-master/DW homework 2.R')
